/////////////////////////////////////////////////////////////////////////////
// Name:        Propulsion_Diag.h
// Purpose:     Dialog for Propulsion
// Author:      Matthew Gong
// Created:     05/24/2005
// Copyright:   (c) Matthew Gong
// Licence:     GPL licence
/////////////////////////////////////////////////////////////////////////////

#if defined(__GNUG__) && !defined(__APPLE__)
// #pragma interface
#endif

// -*- C++ -*- generated by wxGlade 0.3.5.1 on Tue May 24 15:50:46 2005

#include <wx/wx.h>
#include <wx/image.h>
// begin wxGlade: ::dependencies
// end wxGlade


#ifndef PROPULSION_DIAG_H
#define PROPULSION_DIAG_H

#include <wx/txtstrm.h>
#include <FGXMLElement.h>

struct MyColumn4Str;
struct MyColumn3 {
  double x1;
  double x2;
  double x3;
  wxString unit;

  MyColumn3(wxString u=wxT("IN"), double y1=0, double y2=0, double y3=0)
    : unit(u), x1(y1), x2(y2), x3(y3)
  {}

  MyColumn3 & operator = (const MyColumn4Str & s);
};

struct MyColumn4Str
{
  wxString x1;
  wxString x2;
  wxString x3;
  wxString unit;

  MyColumn4Str & operator = (const MyColumn3 & s);
};

class ClientData_engine {
  public:
    ClientData_engine(const wxString & e=wxEmptyString, const wxString & t=wxEmptyString);
    void Load(JSBSim::Element * el);
    void Save(wxTextOutputStream & out, const wxString & prefix);
    wxString GetEngineName() const {return file_e;}
    wxString GetThrusterName() const {return file_t;}

  protected:
    wxString file_e, file_t;
    struct MyColumn3 loc_e, ori_e, loc_t, ori_t;
    std::vector<unsigned> feed_list;

    friend class EngineThrusterDialog;
};

class ClientData_tank{
  public:
    ClientData_tank();
    void Load(JSBSim::Element * el);
    void Save(wxTextOutputStream & out, const wxString & prefix);
    wxString GetText();

  protected:
    wxString type;
    double capacity;
    wxString capacity_unit;
    double contents;
    wxString contents_unit;
    struct MyColumn3 loc;
    
    friend class TankDialog;
};

class EngineThrusterDialog: public wxDialog {
public:
    // begin wxGlade: EngineThrusterDialog::ids
    enum {
     ID_ENGINE_DETAIL = 35122,
     ID_ENGINE_SELECT
    };
    // end wxGlade

    EngineThrusterDialog(wxWindow* parent, int id, const wxString& title=_("Engine/Thruster Setup"), const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxSize(560, 490), long style=wxDEFAULT_DIALOG_STYLE);
    void Load(const ClientData_engine * data);
    void Save(ClientData_engine * data);

private:
    // begin wxGlade: EngineThrusterDialog::methods
    void set_properties();
    void do_layout();
    // end wxGlade

protected:
    // begin wxGlade: EngineThrusterDialog::attributes
    wxStaticBox* sizer_2_copy_staticbox;
    wxStaticBox* sizer_4_copy_copy_staticbox;
    wxStaticBox* sizer_4_copy_1_staticbox;
    wxStaticBox* sizer_5_staticbox;
    wxStaticBox* sizer_2_staticbox;
    wxStaticBox* sizer_4_copy_staticbox;
    wxStaticBox* sizer_4_staticbox;
    wxStaticText* label_name;
    wxTextCtrl* text_ctrl_name;
    wxStaticText* label_x;
    wxTextCtrl* text_ctrl_x;
    wxStaticText* label_y;
    wxTextCtrl* text_ctrl_y;
    wxStaticText* label_z;
    wxTextCtrl* text_ctrl_z;
    wxComboBox* combo_box_pos_unit;
    wxStaticText* label_roll;
    wxTextCtrl* text_ctrl_roll;
    wxStaticText* label_pitch;
    wxTextCtrl* text_ctrl_pitch;
    wxStaticText* label_yaw;
    wxTextCtrl* text_ctrl_yaw;
    wxComboBox* combo_box_orient_unit;
    wxTextCtrl* text_ctrl_feed;
    wxStaticText* label_name_copy;
    wxTextCtrl* text_ctrl_name_copy;
    wxStaticText* label_x_copy_1;
    wxTextCtrl* text_ctrl_x_copy_1;
    wxStaticText* label_y_copy_1;
    wxTextCtrl* text_ctrl_y_copy_1;
    wxStaticText* label_z_copy_1;
    wxTextCtrl* text_ctrl_z_copy_1;
    wxComboBox* combo_box_pos_unit_copy_1;
    wxStaticText* label_roll_copy;
    wxTextCtrl* text_ctrl_roll_copy;
    wxStaticText* label_pitch_copy;
    wxTextCtrl* text_ctrl_pitch_copy;
    wxStaticText* label_yaw_copy;
    wxTextCtrl* text_ctrl_yaw_copy;
    wxComboBox* combo_box_orient_unit_copy;
    wxButton* button_ok;
    wxButton* button_cancel;
    // end wxGlade

    wxString file_e, file_t;
    MyColumn4Str loc_e, ori_e, loc_t, ori_t;
    wxString feed;

};

class TankDialog: public wxDialog {
public:
    // begin wxGlade: TankDialog::ids
    // end wxGlade

    TankDialog(wxWindow* parent, int id, const wxString& title=_("Tank Setup"), const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=wxDEFAULT_DIALOG_STYLE);
    void Load(const ClientData_tank * data);
    void Save(ClientData_tank * data);

private:
    // begin wxGlade: TankDialog::methods
    void set_properties();
    void do_layout();
    // end wxGlade

protected:
    // begin wxGlade: TankDialog::attributes
    wxStaticBox* sizer_4_copy_2_staticbox;
    wxStaticText* label_type;
    wxComboBox* combo_box_type;
    wxStaticText* label_capacity;
    wxTextCtrl* text_ctrl_capacity;
    wxComboBox* combo_box_capacity;
    wxStaticText* label_contents;
    wxTextCtrl* text_ctrl_contents;
    wxComboBox* combo_box_contents;
    wxStaticText* label_x_copy_2;
    wxTextCtrl* text_ctrl_x;
    wxStaticText* label_y_copy_2;
    wxTextCtrl* text_ctrl_y;
    wxStaticText* label_z_copy_2;
    wxTextCtrl* text_ctrl_z;
    wxComboBox* combo_box_pos_unit;
    wxButton* button_ok_copy;
    wxButton* button_cancel_copy;
    // end wxGlade
    
    wxString type;
    wxString capacity;
    wxString capacity_unit;
    wxString contents;
    wxString contents_unit;
    MyColumn4Str loc;
};


#endif // PROPULSION_DIAG_H
